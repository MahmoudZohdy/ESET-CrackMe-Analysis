#include <iostream>
#include <Windows.h>


unsigned char Hashes[688] = {
	0x1E, 0xF7, 0x0F, 0xF7, 0x12, 0xDA, 0x4B, 0x68, 0x4A, 0x38, 0xF4, 0x2F, 0xA1, 0xBD, 0x84, 0x76,
	0xF3, 0x56, 0xD8, 0x68, 0x2F, 0xA1, 0xBD, 0x04, 0xE9, 0x77, 0xBC, 0xA1, 0xBD, 0x84, 0xF6, 0x12,
	0xAD, 0xA6, 0xA0, 0xDA, 0x4B, 0x68, 0x2F, 0x21, 0x68, 0x25, 0xDA, 0x68, 0x2F, 0xA1, 0xBD, 0x04,
	0x1D, 0x5F, 0x13, 0xF7, 0x12, 0xDA, 0x4B, 0xE8, 0x74, 0xF9, 0x4C, 0x85, 0xF6, 0x12, 0xDA, 0xCB,
	0x4A, 0x88, 0x86, 0x13, 0xDA, 0x4B, 0x68, 0x2F, 0x7D, 0x62, 0x15, 0xF7, 0x12, 0xDA, 0x4B, 0x68,
	0x63, 0x8A, 0x36, 0xBE, 0x84, 0xF6, 0x12, 0xDA, 0xA6, 0xAD, 0x1A, 0xF7, 0x12, 0xDA, 0x4B, 0x68,
	0xCA, 0x92, 0xFE, 0x2F, 0xA1, 0xBD, 0x84, 0x76, 0x2C, 0xF4, 0xE2, 0x68, 0x2F, 0xA1, 0xBD, 0x84,
	0x66, 0x67, 0x1C, 0xF7, 0x12, 0xDA, 0x4B, 0xE8, 0x2D, 0x01, 0xAB, 0xDA, 0x4B, 0x68, 0x2F, 0x21,
	0x1E, 0xA0, 0xE4, 0x68, 0x2F, 0xA1, 0xBD, 0x04, 0xFD, 0xDE, 0xC8, 0xA1, 0xBD, 0x84, 0xF6, 0x92,
	0xBF, 0xF6, 0xAC, 0xDA, 0x4B, 0x68, 0x2F, 0xA1, 0x7A, 0x75, 0xE6, 0x68, 0x2F, 0xA1, 0xBD, 0x84,
	0xAD, 0x4F, 0x75, 0x4C, 0x68, 0x2F, 0xA1, 0xBD, 0xDE, 0x12, 0x04, 0x30, 0xA1, 0xBD, 0x84, 0xF6,
	0x0C, 0xAF, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63, 0x7B, 0x5A, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E,
	0xEA, 0x05, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8, 0x59, 0xB1, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3,
	0xC8, 0x5C, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E, 0x37, 0x08, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38,
	0x0A, 0x98, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63, 0xA6, 0xB3, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0x15, 0x5F, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0x84, 0x0A, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0xF3, 0xB5, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x62, 0x61, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E,
	0xD1, 0x0C, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38, 0x40, 0xB8, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0xAF, 0x63, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0xB8, 0x13, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0x27, 0xBF, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x96, 0x6A, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E,
	0x05, 0x16, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38, 0x74, 0xC1, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0xE3, 0x6C, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0x52, 0x18, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0xC1, 0xC3, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x30, 0x6F, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E,
	0x9F, 0x1A, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38, 0x0E, 0xC6, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0x7D, 0x71, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0xEC, 0x1C, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0x5B, 0xC8, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0xCA, 0x73, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E,
	0x39, 0x1F, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38, 0xA8, 0xCA, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0x17, 0x76, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0x86, 0x21, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0xF5, 0xCC, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x64, 0x78, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E,
	0xD3, 0x23, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38, 0x42, 0xCF, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0xB1, 0x7A, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0x20, 0x26, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0x8F, 0xD1, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0xCF, 0xF5, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x38,
	0xD6, 0x8E, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63, 0x69, 0xFA, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x38,
	0x92, 0x3C, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E, 0x1C, 0xF8, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0x67, 0xE3, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x38, 0x9B, 0xEC, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x38,
	0xAD, 0x4C, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0x01, 0xE8, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0x38,
	0x4E, 0xEA, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0xB8, 0x6D, 0x28, 0x8F, 0xE3, 0x38, 0x8E, 0xE3, 0x38,
	0x45, 0x3A, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E, 0xDF, 0x3E, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x8E,
	0x70, 0x93, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63, 0x3E, 0xA1, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63,
	0xBD, 0x95, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0xB4, 0xE5, 0x8E, 0xE3, 0x38, 0x8E, 0xE3, 0xB8,
	0xDA, 0xBC, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0x63, 0x8B, 0xA3, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3,
	0xFA, 0x4E, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E, 0x89, 0x8C, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3,
	0x2C, 0x41, 0xE4, 0x38, 0x8E, 0xE3, 0x38, 0x0E, 0x23, 0x91, 0x39, 0x8E, 0xE3, 0x38, 0x8E, 0xE3
};


int main() {

	DWORD64 hash1 = 0x2AAAAAAAAAAAAB67;
	DWORD64 hash2 = 0x2AAAAAAAAAAAAB6F;
	WCHAR SetOfChars[] = L"0123456789ABCDEFGHIJKLMNOPQR/STUVWXYZabcdefghijklmnopqrstuvwxyz:#@'=\".<(+|$*);,%_>? -&";


	//Brute force operation

	DWORD64* Hashes64 = (DWORD64*)Hashes;
	for (DWORD64 i = 0; i < 0xffff; i = (BYTE)i + 1) {

		DWORD64 RewultMul = (hash1 + i) * hash2;
		DWORD64 RewultAdd = (hash1 + i) + hash2;
		DWORD64 RewultSub = (hash1 + i) - hash2;
		DWORD64 RewultDiv = (hash1 + i) / hash2;

		for (int q = 0; q < 86; q++) {
			if (RewultMul == Hashes64[q]) {
				printf("The operation is * \n");
				return 0;
			}
			if (RewultAdd == Hashes64[q]) {
				printf("The operation is + \n");
				return 0;
			}
			if (RewultSub == Hashes64[q]) {
				printf("The operation is - \n");
				return 0;
			}
			if (RewultDiv == Hashes64[q]) {
				printf("The operation is / \n");
				return 0;
			}

		}
	}

	//Brute force pasword

	char finalaname[0x60];
	int count = 0;
	for (int q = 0; q < 86; q++) {
		int v = 0x0;
		DWORD temp_ = SetOfChars[q % 40];
		DWORD64 Rewult = (hash1 + temp_) * hash2;
		DWORD64 vv = Rewult;
		for (DWORD64 i = 0; i < 0xff; i = i + (BYTE)1) {
			vv = Rewult;
			vv = (Rewult + i) * hash2;

			if (Hashes64[q] == vv) {
				finalaname[count++] = i;
				break;
			}
		}
	}
	finalaname[count] = 0x00;
	printf("%s\n", finalaname);


	return 0;

}